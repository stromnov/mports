# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# $Id: Portfile 104220 2013-03-21 03:37:44Z larryv@macports.org $

PortSystem          1.0
PortGroup           github 1.0
PortGroup           python 1.0

github.setup        PyMVPA PyMVPA 2.2.0 upstream/

name                py-pymvpa
revision            0
epoch               1
categories-append   science math
platforms           darwin
license             MIT

python.versions     26 27

maintainers         jameskyle openmaintainer

description         MultiVariate Pattern Analysis (MVPA) in Python.

long_description    PyMVPA is a Python package intended to ease statistical \
                    learning analyses of large datasets. It offers \
                    an extensible framework with a high-level interface \
                    to a broad range of algorithms for classification, \
                    regression, feature selection, data import and export. \
                    While it is not limited to the neuroimaging domain, \
                    it is eminently suited for such datasets.

homepage            http://www.pymvpa.org

checksums           rmd160  419d02f6d83104fa5dd0be0c2823f96afd3f5a10 \
                    sha256  3b1393886776e10f1b97b5a661d878b6943e759f969dfc054e40e867c37d4df5

if {$subport != $name} {
    depends_build-append \
                        port:py${python.version}-distribute
    depends_lib-append  port:py${python.version}-numpy \
                        port:libsvm

    patchfiles-append   patch-setup.py.diff

    post-patch {
        reinplace "s|@@PREFIX@@|${prefix}|g" ${worksrcpath}/setup.py
    }

    build.args-append   --with-system-libsvm
}
                        #port:git-core \
                        #port:py26-scipy \
                        #port:py26-pynifti \
                        #port:py26-hcluster \
                        #port:swig-python \
                        #port:py26-pywavelets \
                        #port:shogun \
                        #port:py26-matplotlib \
                        #port:py26-lxml

#depends_build           port:git-core

# py26-scipy is not universal
# universal_variant       no

#configure.args          --with-system-libsvm
#build.args              --with-system-libsvm
#build.target            build

#pre-fetch {
#    if {[file exists ${prefix}/share/doc/mvpa]} {
#        ui_error "It appears the 2.5 version of mvpa is installed"
#        ui_error "Only one version of pymvpa can be installed at one time"
#        return -code error "multiple mvpa installs detected"
#    }
#
#    if {![variant_isset no_shogun]} {
#      if {![file exists ${python.pkgd}/sg.so]} {
#        ui_error "To install pymvpa with the shogun variant, shogun must be installed with the python variant."
#        return -code error "incompatible shogun installation"
#      }
#    }
#
#}

#variant no_shogun description {Do not build shogun} {
#    depends_lib-delete port:shogun
#}

#variant gcc43 conflicts gcc44 gcc45 gcc46 gcc47 description {build with gcc 4.3} {
#    depends_build-append port:gcc43
#}
#variant gcc44 conflicts gcc43 gcc45 gcc46 gcc47 description {build with gcc 4.4} {
#    depends_build-append port:gcc44
#}
#variant gcc45 conflicts gcc43 gcc44 gcc46 gcc47 description {build with gcc 4.5} {
#    depends_build-append port:gcc45
#}
#variant gcc46 conflicts gcc43 gcc44 gcc45 gcc47 description {build with gcc 4.6} {
#    depends_build-append port:gcc46
#}
#variant gcc47 conflicts gcc43 gcc44 gcc45 gcc46 description {build with gcc 4.7} {
#    depends_build-append port:gcc47
#}
#
#if {[variant_isset gcc43]} {
#    set gccversion 4.3
#} elseif {[variant_isset gcc44]} {
#    set gccversion 4.4
#} elseif {[variant_isset gcc45]} {
#    set gccversion 4.5
#} elseif {[variant_isset gcc46]} {
#    set gccversion 4.6
#} else {
#    default_variants +gcc47
#    set gccversion 4.7
#}
#
#set gccnumber [join [split ${gccversion} .] ""]
 
#configure.compiler      macports-gcc-${gccversion}
#configure.env           CC=${prefix}/bin/gcc-mp-${gccversion} \
#                        CPP=${prefix}/bin/g++-mp-${gccversion}
#
#build.env-append        CC=${prefix}/bin/gcc-mp-${gccversion} \
#                        CPP=${prefix}/bin/g++-mp-${gccversion} \
#                        CCFLAGS="-I${prefix}/include -L${prefix}/lib" \
#                        CPPFLAGS="-I${prefix}/include -L${prefix}/lib"
#
#destroot.env-append     CC=${prefix}/bin/gcc-mp-${gccversion} \
#                        CPP=${prefix}/bin/g++-mp-${gccversion} \
#                        CCFLAGS="-I${prefix}/include -L${prefix}/lib" \
#                        CPPFLAGS="-I${prefix}/include -L${prefix}/lib"
#
#
#post-destroot {
 # xinstall -m 755 -d "${destroot}${prefix}/share/doc/"
 # file delete ${worksrcpath}/doc/todo.txt
 # file delete ${worksrcpath}/doc/legal.txt
 # file delete ${worksrcpath}/doc/changelog.txt
#
#  file copy ${worksrcpath}/TODO ${worksrcpath}/doc/
#  file copy ${worksrcpath}/COPYING ${worksrcpath}/doc/
#  file copy ${worksrcpath}/Changelog ${worksrcpath}/doc/
#  file copy ${worksrcpath}/doc ${destroot}${prefix}/share/doc/mvpa
#}

livecheck.regex     "archive/upstream/(\[^\"\]+)${extract.suffix}"
